{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://runcppfunctionsextension/./src/OutputChannel.ts","webpack://runcppfunctionsextension/./src/SpecsConfig.ts","webpack://runcppfunctionsextension/./src/TestExplorer.ts","webpack://runcppfunctionsextension/./src/TestManager.ts","webpack://runcppfunctionsextension/./src/TestTypes.ts","webpack://runcppfunctionsextension/external commonjs \"vscode\"","webpack://runcppfunctionsextension/external node-commonjs \"child_process\"","webpack://runcppfunctionsextension/webpack/bootstrap","webpack://runcppfunctionsextension/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\r\n\r\nconst CHANNEL_NAME = \"Specs Explorer\";\r\n\r\nexport const SpecsExplorerOutput = vscode.window.createOutputChannel(CHANNEL_NAME);\r\n","import * as vscode from \"vscode\";\r\n\r\nexport class SpecsConfigFile {\r\n    suites: SpecsSuiteConfig[] = [];\r\n    defaults: SpecsSuiteConfig = new SpecsSuiteConfig();\r\n    suitesById: Map<string, SpecsSuiteConfig> = new Map<string, SpecsSuiteConfig>();\r\n    anySuitesSupportDebug(): boolean {\r\n        for (const [suiteId, suiteConfig] of this.suitesById)\r\n            if (suiteConfig.debugger && suiteConfig.debugExecutable) return true;\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class SpecsSuiteConfig {\r\n    public isGroup: boolean = false;\r\n    public name: string;\r\n    public parent: SpecsSuiteConfig | undefined = undefined;\r\n    public children: SpecsSuiteConfig[] = [];\r\n    public buildCommand: string | undefined = undefined;\r\n    public discoveryCommand: string = \"\";\r\n    public groupSeparator: string | undefined = undefined;\r\n    public discoveryRegex: string | undefined = undefined;\r\n    public runCommand: string = \"\";\r\n    public debugExecutable: string | undefined = undefined;\r\n    public debugger: string | undefined = undefined;\r\n    public variables: { [key: string]: string } = {};\r\n\r\n    constructor(name: string = \"\", parent: SpecsSuiteConfig | undefined = undefined) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n    }\r\n\r\n    idenfifier(): string {\r\n        if (this.parent) return `${this.parent.idenfifier()}/${this.name}`;\r\n        else return this.name;\r\n    }\r\n}\r\n\r\nfunction parseSuiteConfig(\r\n    suiteJSON: any,\r\n    specsConfigFile: SpecsConfigFile,\r\n    parentSpecSuite: SpecsSuiteConfig | undefined = undefined,\r\n): SpecsSuiteConfig {\r\n    if (suiteJSON.name === undefined) throw new Error(\"Suite name is required\");\r\n\r\n    const suiteConfig = new SpecsSuiteConfig(suiteJSON.name, parentSpecSuite);\r\n\r\n    if (suiteJSON.group) suiteConfig.isGroup = suiteJSON.group;\r\n    if (suiteJSON.build) suiteConfig.buildCommand = suiteJSON.build;\r\n    if (suiteJSON.discover) suiteConfig.discoveryCommand = suiteJSON.discover;\r\n    if (suiteJSON.groupSeparator) suiteConfig.groupSeparator = suiteJSON.groupSeparator;\r\n    if (suiteJSON.pattern) suiteConfig.discoveryRegex = suiteJSON.pattern;\r\n    if (suiteJSON.run) suiteConfig.runCommand = suiteJSON.run;\r\n    if (suiteJSON.debug) suiteConfig.debugExecutable = suiteJSON.debug;\r\n    if (suiteJSON.debugger) suiteConfig.debugger = suiteJSON.debugger;\r\n    if (suiteJSON.suites)\r\n        for (const childSuiteJSON of suiteJSON.suites)\r\n            suiteConfig.children.push(parseSuiteConfig(childSuiteJSON, specsConfigFile));\r\n\r\n    for (const key in suiteJSON) suiteConfig.variables[key] = suiteJSON[key];\r\n\r\n    specsConfigFile.suitesById.set(suiteConfig.idenfifier(), suiteConfig);\r\n\r\n    return suiteConfig;\r\n}\r\n\r\nfunction processVariables(suiteConfig: SpecsSuiteConfig) {\r\n    const variables = suiteConfig.variables;\r\n    Object.keys(variables).forEach((variableName) => {\r\n        const variableValue = variables[variableName];\r\n        const replaceText = \"$\" + variableName;\r\n        if (suiteConfig.buildCommand)\r\n            suiteConfig.buildCommand = suiteConfig.buildCommand.replace(replaceText, variableValue);\r\n        if (suiteConfig.discoveryCommand)\r\n            suiteConfig.discoveryCommand = suiteConfig.discoveryCommand.replace(replaceText, variableValue);\r\n        if (suiteConfig.groupSeparator)\r\n            suiteConfig.groupSeparator = suiteConfig.groupSeparator.replace(replaceText, variableValue);\r\n        if (suiteConfig.discoveryRegex)\r\n            suiteConfig.discoveryRegex = suiteConfig.discoveryRegex.replace(replaceText, variableValue);\r\n        if (suiteConfig.runCommand) suiteConfig.runCommand = suiteConfig.runCommand.replace(replaceText, variableValue);\r\n        if (suiteConfig.debugExecutable)\r\n            suiteConfig.debugExecutable = suiteConfig.debugExecutable.replace(replaceText, variableValue);\r\n        if (suiteConfig.debugger) suiteConfig.debugger = suiteConfig.debugger.replace(replaceText, variableValue);\r\n    });\r\n}\r\n\r\nfunction parseSpecsConfigFile(configJSON: any): SpecsConfigFile {\r\n    const specsConfig = new SpecsConfigFile();\r\n\r\n    if (configJSON.suites) {\r\n        for (const suiteJSON of configJSON.suites) specsConfig.suites.push(parseSuiteConfig(suiteJSON, specsConfig));\r\n    } else if (configJSON.run || configJSON.discover) {\r\n        if (!configJSON.name) configJSON.name = \"\";\r\n        specsConfig.suites.push(parseSuiteConfig(configJSON, specsConfig));\r\n    }\r\n\r\n    if (configJSON.defaults) {\r\n        if (!configJSON.defaults.name) configJSON.defaults.name = \"defaults\";\r\n        specsConfig.defaults = parseSuiteConfig(configJSON.defaults, specsConfig);\r\n        specsConfig.defaults.isGroup = true;\r\n    }\r\n\r\n    specsConfig.suitesById.forEach((suiteConfig) => {\r\n        if (!suiteConfig.isGroup) {\r\n            if (!suiteConfig.buildCommand) suiteConfig.buildCommand = specsConfig.defaults.buildCommand;\r\n            if (!suiteConfig.discoveryCommand) suiteConfig.discoveryCommand = specsConfig.defaults.discoveryCommand;\r\n            if (!suiteConfig.groupSeparator) suiteConfig.groupSeparator = specsConfig.defaults.groupSeparator;\r\n            if (!suiteConfig.discoveryRegex) suiteConfig.discoveryRegex = specsConfig.defaults.discoveryRegex;\r\n            if (!suiteConfig.runCommand) suiteConfig.runCommand = specsConfig.defaults.runCommand;\r\n            if (!suiteConfig.debugExecutable) suiteConfig.debugExecutable = specsConfig.defaults.debugExecutable;\r\n            for (const key in specsConfig.defaults.variables)\r\n                if (!suiteConfig.variables[key]) suiteConfig.variables[key] = specsConfig.defaults.variables[key];\r\n        }\r\n    });\r\n\r\n    specsConfig.suitesById.forEach((suiteConfig) => {\r\n        processVariables(suiteConfig);\r\n    });\r\n\r\n    return specsConfig;\r\n}\r\n\r\nasync function readSpecsConfigFile(): Promise<SpecsConfigFile | undefined> {\r\n    const file = await vscode.workspace.findFiles(specConfigFileName);\r\n    if (file.length > 0) {\r\n        const content = await vscode.workspace.fs.readFile(file[0]);\r\n        const config = JSON.parse(content.toString());\r\n        return parseSpecsConfigFile(config);\r\n    } else {\r\n        vscode.window.showErrorMessage(\"No specs config file found\");\r\n    }\r\n}\r\n\r\nconst specConfigFileName = \".specs.json\";\r\n\r\nexport async function getSpecsConfig(): Promise<SpecsConfigFile | undefined> {\r\n    return await readSpecsConfigFile();\r\n}\r\n","import * as vscode from \"vscode\";\r\nimport { discoverTests, buildTestsProject, runTest, debugTest } from \"./TestManager\";\r\nimport { ITestComponent, Test, TestComponentType, TestGroup } from \"./TestTypes\";\r\nimport { getSpecsConfig } from \"./SpecsConfig\";\r\n\r\nconst CONTROLLER_ID = \"specs-explorer\";\r\nconst CONTROLLER_LABEL = \"Specs Explorer\";\r\n\r\nclass TestExplorer {\r\n    _controller: vscode.TestController;\r\n\r\n    constructor() {\r\n        this._controller = vscode.tests.createTestController(CONTROLLER_ID, CONTROLLER_LABEL);\r\n        this._controller.refreshHandler = this.refresh.bind(this);\r\n        this._controller.resolveHandler = async (test) => {\r\n            if (test) vscode.window.showErrorMessage(\"Resolving individual tests is not supported\");\r\n            else await this.refresh();\r\n        };\r\n        this._controller.createRunProfile(\"Run\", vscode.TestRunProfileKind.Run, this.run.bind(this), true);\r\n        getSpecsConfig().then((config) => {\r\n            if (config?.anySuitesSupportDebug())\r\n                this._controller.createRunProfile(\r\n                    \"Debug\",\r\n                    vscode.TestRunProfileKind.Debug,\r\n                    this.debug.bind(this),\r\n                    true,\r\n                );\r\n        });\r\n    }\r\n\r\n    registerController(context: vscode.ExtensionContext) {\r\n        context.subscriptions.push(this._controller);\r\n    }\r\n\r\n    private registerTestComponent(\r\n        discoveredIds: Set<string>,\r\n        testComponent: ITestComponent,\r\n        parentTestItem?: vscode.TestItem,\r\n    ) {\r\n        if (testComponent.type === TestComponentType.Test) {\r\n            const test = testComponent as Test;\r\n            const id = `${test.suiteId}|~|~|~|~|${test.filePath}|-|-|-|${test.lineNumber}`;\r\n            discoveredIds.add(id);\r\n            const filePath = vscode.Uri.joinPath(vscode.workspace.workspaceFolders![0].uri, test.filePath);\r\n            const vscodeTest = this._controller.createTestItem(id, test.description, vscode.Uri.file(filePath.fsPath));\r\n            vscodeTest.range = new vscode.Range(\r\n                new vscode.Position(test.lineNumber - 1, 0),\r\n                new vscode.Position(test.lineNumber - 1, 0),\r\n            );\r\n            if (parentTestItem) parentTestItem.children.add(vscodeTest);\r\n            else this._controller.items.add(vscodeTest);\r\n        } else if (testComponent.type === TestComponentType.TestGroup) {\r\n            const testGroup = testComponent as TestGroup;\r\n            if (testGroup.description === \"\") {\r\n                testGroup.children.forEach((child) => {\r\n                    this.registerTestComponent(discoveredIds, child, parentTestItem);\r\n                });\r\n            } else {\r\n                const id = `group: ${testGroup.fullDescription()}|${testGroup.suiteId}}`;\r\n                discoveredIds.add(id);\r\n                const vscodeTestGroup = this._controller.createTestItem(id, testGroup.description);\r\n                if (parentTestItem) parentTestItem.children.add(vscodeTestGroup);\r\n                else this._controller.items.add(vscodeTestGroup);\r\n                testGroup.children.forEach((child) => {\r\n                    this.registerTestComponent(discoveredIds, child, vscodeTestGroup);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async refresh() {\r\n        const existingTestIds = new Set<string>();\r\n        this._controller.items.forEach((test) => {\r\n            existingTestIds.add(test.id);\r\n        });\r\n\r\n        const discoveredTestComponents = await discoverTests();\r\n        if (!discoveredTestComponents) {\r\n            vscode.window.showErrorMessage(\"Failed to discover tests\");\r\n            this._controller.items.forEach((test) => {\r\n                this._controller.items.delete(test.id);\r\n            });\r\n            return;\r\n        }\r\n\r\n        const discoveredIds = new Set<string>();\r\n\r\n        discoveredTestComponents.forEach((testComponent) => {\r\n            this.registerTestComponent(discoveredIds, testComponent);\r\n        });\r\n\r\n        existingTestIds.forEach((id) => {\r\n            if (!discoveredIds.has(id)) this._controller.items.delete(id);\r\n        });\r\n    }\r\n\r\n    addTestsToRun(test: vscode.TestItem, testsToRun: vscode.TestItem[]) {\r\n        testsToRun.push(test);\r\n        test.children.forEach((child) => {\r\n            this.addTestsToRun(child, testsToRun);\r\n        });\r\n    }\r\n\r\n    async run(request: vscode.TestRunRequest, token: vscode.CancellationToken) {\r\n        await buildTestsProject();\r\n\r\n        const run = this._controller.createTestRun(request);\r\n        const testsToRun: vscode.TestItem[] = [];\r\n\r\n        if (request.include)\r\n            request.include.forEach((test) => {\r\n                this.addTestsToRun(test, testsToRun);\r\n            });\r\n        else\r\n            this._controller.items.forEach((test) => {\r\n                this.addTestsToRun(test, testsToRun);\r\n            });\r\n\r\n        run.appendOutput(`Running ${testsToRun.length} tests\\n`);\r\n\r\n        while (testsToRun.length > 0 && !token.isCancellationRequested) {\r\n            const test = testsToRun.pop()!;\r\n\r\n            if (request.exclude?.includes(test)) continue;\r\n\r\n            if (test.id.startsWith(\"group:\")) continue; // or mark passed?\r\n\r\n            const [suiteId, filenameAndLineNumber] = test.id.split(\"|~|~|~|~|\");\r\n            const [filename, linenumber] = filenameAndLineNumber.split(\"|-|-|-|\");\r\n\r\n            const start = Date.now();\r\n            run.started(test);\r\n            const testResult = await runTest(suiteId, filename, parseInt(linenumber));\r\n            if (!testResult) continue;\r\n\r\n            const duration = Date.now() - start;\r\n            if (testResult.testPassed) run.passed(test, duration);\r\n            else run.failed(test, new vscode.TestMessage(testResult.testOutput), duration);\r\n        }\r\n        run.end();\r\n    }\r\n\r\n    async debug(request: vscode.TestRunRequest, token: vscode.CancellationToken) {\r\n        const debugAll = request.include === undefined;\r\n        if (debugAll) {\r\n            vscode.window.showErrorMessage(\"Debug all tests is not supported\");\r\n            return;\r\n        }\r\n        if (request.include.length > 1) {\r\n            vscode.window.showErrorMessage(\"Debugging multiple tests is not supported\");\r\n            return;\r\n        }\r\n\r\n        const test = request.include[0];\r\n        // TODO: a test can have metadata, right? Instead of this INSANITY?\r\n        const [suiteId, filenameAndLineNumber] = test.id.split(\"|~|~|~|~|\");\r\n        const [filename, linenumber] = filenameAndLineNumber.split(\"|-|-|-|\");\r\n\r\n        await buildTestsProject();\r\n        await debugTest(suiteId, filename, parseInt(linenumber));\r\n    }\r\n}\r\n\r\nconst testExplorer = new TestExplorer();\r\n\r\nexport function RegisterSpecsTestExtension(context: vscode.ExtensionContext) {\r\n    testExplorer.registerController(context);\r\n}\r\n","import * as vscode from \"vscode\";\r\nimport * as child_process from \"child_process\";\r\nimport { getSpecsConfig, SpecsSuiteConfig } from \"./SpecsConfig\";\r\nimport { ITestComponent, Test, TestGroup, TestResult } from \"./TestTypes\";\r\nimport { SpecsExplorerOutput } from \"./OutputChannel\";\r\n\r\nclass TestManager {\r\n    async buildSuite(specsSuiteConfig: SpecsSuiteConfig): Promise<void> {\r\n        if (specsSuiteConfig.isGroup) return;\r\n        if (specsSuiteConfig.buildCommand) {\r\n            const command = specsSuiteConfig.buildCommand;\r\n            const options = { cwd: vscode.workspace.workspaceFolders?.[0].uri.fsPath };\r\n            return new Promise((resolve) => {\r\n                SpecsExplorerOutput.appendLine(`Running ${command}`);\r\n                const child = child_process.exec(command, options);\r\n                child.stdout?.on(\"data\", (data) => {\r\n                    SpecsExplorerOutput.appendLine(data);\r\n                });\r\n                child.stderr?.on(\"data\", (data) => {\r\n                    SpecsExplorerOutput.appendLine(data);\r\n                });\r\n                child.on(\"close\", (code) => {\r\n                    SpecsExplorerOutput.appendLine(`Command ${command} exited with code ${code}`);\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public async build(suiteIds: string[] | undefined = undefined): Promise<void> {\r\n        const specsConfig = await getSpecsConfig();\r\n        if (!specsConfig?.suites.length) {\r\n            vscode.window.showErrorMessage(\"No suites specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        if (!suiteIds) suiteIds = Array.from(specsConfig.suitesById.keys());\r\n        if (!suiteIds.length) return;\r\n\r\n        const promises: Promise<void>[] = [];\r\n        suiteIds.forEach((suiteId) => {\r\n            const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n            if (!suiteConfig?.isGroup) {\r\n                if (suiteConfig?.buildCommand) promises.push(this.buildSuite(suiteConfig));\r\n            }\r\n        });\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    public async run(suiteId: string, filePath: string, lineNumber: number): Promise<TestResult | undefined> {\r\n        const specsConfig = await getSpecsConfig();\r\n        const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n        if (suiteConfig?.isGroup) return;\r\n        if (!suiteConfig) {\r\n            vscode.window.showErrorMessage(`Suite '${suiteId}' not found in specs.json`);\r\n            return;\r\n        }\r\n        if (!suiteConfig?.runCommand) {\r\n            vscode.window.showErrorMessage(\"No run command specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        let testResult: TestResult = new TestResult();\r\n\r\n        // TODO HERE! USE REPLACEMENT TOKEN THINGS!\r\n        const command = suiteConfig.runCommand.replace(\"{file}\", filePath).replace(\"{line}\", lineNumber.toString());\r\n\r\n        return new Promise((resolve) => {\r\n            const options = { cwd: vscode.workspace.workspaceFolders?.[0].uri.fsPath };\r\n            SpecsExplorerOutput.appendLine(`Running ${command}`);\r\n            const child = child_process.exec(command, options, (error) => {\r\n                if (error) testResult.testPassed = false;\r\n            });\r\n            child.stdout?.on(\"data\", (data) => {\r\n                SpecsExplorerOutput.appendLine(data);\r\n                testResult.testOutput += data;\r\n            });\r\n            child.stderr?.on(\"data\", (data) => {\r\n                SpecsExplorerOutput.appendLine(data);\r\n                testResult.testOutput += data;\r\n            });\r\n            child.on(\"close\", (code) => {\r\n                SpecsExplorerOutput.appendLine(`Command ${command} exited with code ${code}`);\r\n                testResult.testPassed = code === 0;\r\n                resolve(testResult);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async debug(suiteId: string, filePath: string, lineNumber: number) {\r\n        const specsConfig = await getSpecsConfig();\r\n        const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n\r\n        if (!suiteConfig?.debugExecutable) {\r\n            vscode.window.showErrorMessage(\"No debug command specified in specs.json\");\r\n            return;\r\n        }\r\n        if (!suiteConfig?.debugger) {\r\n            vscode.window.showErrorMessage(\"No debugger specified (e.g. cppvsdbg) in specs.json\");\r\n            return;\r\n        }\r\n\r\n        vscode.debug.startDebugging(vscode.workspace.workspaceFolders?.[0], {\r\n            name: \"Debug Test\",\r\n            type: suiteConfig.debugger,\r\n            request: \"launch\",\r\n            program: suiteConfig.debugExecutable,\r\n            args: [filePath, lineNumber.toString()],\r\n            cwd: \"${workspaceFolder}\",\r\n            environment: [],\r\n        });\r\n    }\r\n\r\n    public async discoverSuite(suiteId: string): Promise<ITestComponent[] | undefined> {\r\n        const specsConfig = await getSpecsConfig();\r\n        const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n        if (!suiteConfig) {\r\n            vscode.window.showErrorMessage(`Suite '${suiteId}' not found in specs.json`);\r\n            return;\r\n        }\r\n        if (suiteConfig?.isGroup) return;\r\n        if (!suiteConfig?.discoveryCommand) {\r\n            vscode.window.showErrorMessage(\"No discovery command (discover:) specified in specs.json\");\r\n            return;\r\n        }\r\n        if (!suiteConfig?.discoveryRegex) {\r\n            vscode.window.showErrorMessage(\"No discovery regex (pattern:) specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        const command = suiteConfig.discoveryCommand;\r\n        const options = { cwd: vscode.workspace.workspaceFolders?.[0].uri.fsPath };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            SpecsExplorerOutput.appendLine(`Running ${command}`);\r\n            const child = child_process.exec(command, options, (error) => {\r\n                if (error) reject(error);\r\n            });\r\n            child.stdout?.on(\"data\", (data) => {\r\n                SpecsExplorerOutput.appendLine(data);\r\n                const rootTestGroup = new TestGroup(suiteId, suiteConfig.name);\r\n                const lines = data.split(\"\\n\");\r\n                for (const line of lines) this.parseTestLine(line, suiteConfig!, rootTestGroup);\r\n                if (suiteConfig.name === \"\") resolve(rootTestGroup.children);\r\n                else resolve([rootTestGroup]);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async discover(suiteIds: string[] | undefined = undefined): Promise<ITestComponent[] | undefined> {\r\n        const specsConfig = await getSpecsConfig();\r\n        if (!specsConfig?.suites.length) {\r\n            vscode.window.showErrorMessage(\"No suites specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        if (!suiteIds) suiteIds = Array.from(specsConfig.suitesById.keys());\r\n        if (!suiteIds.length) return;\r\n\r\n        const promises: Promise<ITestComponent[] | undefined>[] = [];\r\n        suiteIds.forEach((suiteId) => {\r\n            const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n            if (suiteConfig?.discoveryCommand) promises.push(this.discoverSuite(suiteConfig.idenfifier()));\r\n        });\r\n        return Promise.all(promises).then((results) => {\r\n            const rootTestGroup = new TestGroup();\r\n            results.forEach((result) => {\r\n                if (result) rootTestGroup.children.push(...result);\r\n            });\r\n            return rootTestGroup.children;\r\n        });\r\n    }\r\n\r\n    private parseTestLine(line: string, suiteConfig: SpecsSuiteConfig, rootTestGroup: TestGroup) {\r\n        const suiteId = suiteConfig.idenfifier();\r\n        const testInfoRegex = new RegExp(suiteConfig.discoveryRegex!);\r\n        const matches = testInfoRegex.exec(line);\r\n        if (matches && matches.groups) {\r\n            const filePath = matches.groups.filepath;\r\n            const lineNumber = parseInt(matches.groups.linenumber);\r\n            const fullTestDescription = matches.groups.description.trim();\r\n            SpecsExplorerOutput.appendLine(`Discovered test: ${fullTestDescription} (${filePath}:${lineNumber})`);\r\n            if (suiteConfig.groupSeparator) {\r\n                const testDescriptionParts = fullTestDescription\r\n                    .split(suiteConfig.groupSeparator)\r\n                    .map((part) => part.trim());\r\n\r\n                const testDescription = testDescriptionParts.pop()?.trim()!;\r\n\r\n                if (testDescriptionParts.length === 0) {\r\n                    SpecsExplorerOutput.appendLine(\r\n                        `Adding test ${testDescription} to root group (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                    );\r\n                    const test = new Test(suiteId, testDescription, filePath, lineNumber);\r\n                    rootTestGroup.children.push(test);\r\n                    return;\r\n                }\r\n\r\n                let currentTestGroup = rootTestGroup;\r\n                testDescriptionParts.forEach((testGroupDescription) => {\r\n                    let testGroup = currentTestGroup.children.find(\r\n                        (child) => child.description === testGroupDescription,\r\n                    );\r\n                    if (!testGroup) {\r\n                        SpecsExplorerOutput.appendLine(\r\n                            `Adding test group ${testGroupDescription} to group ${currentTestGroup.description} (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                        );\r\n                        testGroup = new TestGroup(suiteId, testGroupDescription, currentTestGroup);\r\n                        currentTestGroup.children.push(testGroup);\r\n                    }\r\n                    currentTestGroup = testGroup as TestGroup;\r\n                });\r\n\r\n                SpecsExplorerOutput.appendLine(\r\n                    `Adding test ${testDescription} to group ${currentTestGroup.description} (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                );\r\n                const test = new Test(suiteId, testDescription, filePath, lineNumber, currentTestGroup);\r\n\r\n                currentTestGroup.children.push(test);\r\n            } else {\r\n                SpecsExplorerOutput.appendLine(\r\n                    `Adding test ${fullTestDescription.trim()} to root group (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                );\r\n                const test = new Test(suiteId, fullTestDescription.trim(), filePath, lineNumber);\r\n                rootTestGroup.children.push(test);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst testManager = new TestManager();\r\n\r\nexport async function buildTestsProject(): Promise<void> {\r\n    await testManager.build();\r\n}\r\n\r\nexport async function runTest(suiteId: string, filePath: string, lineNumber: number): Promise<TestResult | undefined> {\r\n    return await testManager.run(suiteId, filePath, lineNumber);\r\n}\r\n\r\nexport async function debugTest(suiteId: string, filePath: string, lineNumber: number) {\r\n    testManager.debug(suiteId, filePath, lineNumber);\r\n}\r\n\r\nexport async function discoverTests(): Promise<ITestComponent[] | undefined> {\r\n    await testManager.build();\r\n    return await testManager.discover();\r\n}\r\n","export enum TestComponentType {\r\n    Test,\r\n    TestGroup,\r\n}\r\n\r\nexport interface ITestComponent {\r\n    suiteId: string | undefined;\r\n    type: TestComponentType;\r\n    description: string;\r\n    group: TestGroup | undefined;\r\n    fullDescription(): string;\r\n}\r\n\r\nclass TestComponent implements ITestComponent {\r\n    public suiteId: string | undefined;\r\n    public type = TestComponentType.Test;\r\n    public description;\r\n    public group;\r\n\r\n    constructor(suiteId: string | undefined, description: string, group: TestGroup | undefined = undefined) {\r\n        this.suiteId = suiteId;\r\n        this.description = description;\r\n        this.group = group;\r\n    }\r\n\r\n    public fullDescription(): string {\r\n        if (this.group) return `${this.group.fullDescription()} > ${this.description}`;\r\n        else return this.description;\r\n    }\r\n}\r\n\r\n// Class TestGroup which inherits from TestComponent and additionally contains a list of children TestComponents\r\nexport class TestGroup extends TestComponent {\r\n    public type = TestComponentType.TestGroup;\r\n    public children: ITestComponent[] = [];\r\n    constructor(\r\n        suiteId: string | undefined = undefined,\r\n        description: string = \"\",\r\n        group: TestGroup | undefined = undefined,\r\n    ) {\r\n        super(suiteId, description, group);\r\n    }\r\n    isRootGroup(): boolean {\r\n        return this.group === undefined;\r\n    }\r\n}\r\n\r\n// Class Test which inherits from TestComponent and additionally contains a file path and line number\r\nexport class Test extends TestComponent {\r\n    public filePath: string;\r\n    public lineNumber: number;\r\n    constructor(\r\n        suiteId: string,\r\n        description: string,\r\n        filePath: string,\r\n        lineNumber: number,\r\n        group: TestGroup | undefined = undefined,\r\n    ) {\r\n        super(suiteId, description, group);\r\n        this.filePath = filePath;\r\n        this.lineNumber = lineNumber;\r\n    }\r\n}\r\n\r\nexport class TestResult {\r\n    constructor(public testOutput: string = \"\", public testPassed: boolean = false) {}\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from \"vscode\";\nimport { RegisterSpecsTestExtension } from \"./TestExplorer\";\n\n// TODO: GROUPS!\n// TODO: TAGS!\n\nexport function activate(context: vscode.ExtensionContext) {\n    RegisterSpecsTestExtension(context);\n}\n\nexport function deactivate() {}\n"],"names":["SpecsExplorerOutput","vscode","window","createOutputChannel","SpecsConfigFile","suites","defaults","SpecsSuiteConfig","suitesById","Map","anySuitesSupportDebug","suiteId","suiteConfig","this","debugger","debugExecutable","isGroup","name","parent","undefined","children","buildCommand","discoveryCommand","groupSeparator","discoveryRegex","runCommand","variables","constructor","idenfifier","parseSuiteConfig","suiteJSON","specsConfigFile","parentSpecSuite","Error","group","build","discover","pattern","run","debug","childSuiteJSON","push","key","set","async","file","workspace","findFiles","length","content","fs","readFile","configJSON","specsConfig","forEach","Object","keys","variableName","variableValue","replaceText","replace","processVariables","parseSpecsConfigFile","JSON","parse","toString","showErrorMessage","readSpecsConfigFile","testExplorer","_controller","tests","createTestController","refreshHandler","refresh","bind","resolveHandler","test","createRunProfile","TestRunProfileKind","Run","getSpecsConfig","then","config","Debug","registerController","context","subscriptions","registerTestComponent","discoveredIds","testComponent","parentTestItem","type","TestComponentType","Test","id","filePath","lineNumber","add","Uri","joinPath","workspaceFolders","uri","vscodeTest","createTestItem","description","fsPath","range","Range","Position","items","TestGroup","testGroup","child","fullDescription","vscodeTestGroup","existingTestIds","Set","discoveredTestComponents","discoverTests","delete","has","addTestsToRun","testsToRun","request","token","buildTestsProject","createTestRun","include","appendOutput","isCancellationRequested","pop","exclude","includes","startsWith","filenameAndLineNumber","split","filename","linenumber","start","Date","now","started","testResult","runTest","parseInt","duration","testPassed","passed","failed","TestMessage","testOutput","end","debugTest","testManager","buildSuite","specsSuiteConfig","command","options","cwd","Promise","resolve","appendLine","child_process","exec","stdout","on","data","stderr","code","suiteIds","Array","from","promises","get","all","TestResult","error","startDebugging","program","args","environment","discoverSuite","reject","rootTestGroup","lines","line","parseTestLine","results","result","matches","RegExp","groups","filepath","fullTestDescription","trim","testDescriptionParts","map","part","testDescription","currentTestGroup","testGroupDescription","find","TestComponent","super","isRootGroup","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","RegisterSpecsTestExtension"],"sourceRoot":""}