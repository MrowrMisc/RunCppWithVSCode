{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://beta-minispecs-test-runner/./src/OutputChannel.ts","webpack://beta-minispecs-test-runner/./src/SpecsConfig.ts","webpack://beta-minispecs-test-runner/./src/TestExplorer.ts","webpack://beta-minispecs-test-runner/./src/TestItems.ts","webpack://beta-minispecs-test-runner/./src/TestManager.ts","webpack://beta-minispecs-test-runner/./src/TestTypes.ts","webpack://beta-minispecs-test-runner/external commonjs \"vscode\"","webpack://beta-minispecs-test-runner/external node-commonjs \"child_process\"","webpack://beta-minispecs-test-runner/webpack/bootstrap","webpack://beta-minispecs-test-runner/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\r\n\r\nconst CHANNEL_NAME = \"Specs Explorer\";\r\n\r\nexport const SpecsExplorerOutput = vscode.window.createOutputChannel(CHANNEL_NAME);\r\n","import * as vscode from \"vscode\";\r\n\r\nexport class SpecsConfigFile {\r\n    suites: SpecsSuiteConfig[] = [];\r\n    defaults: SpecsSuiteConfig = new SpecsSuiteConfig();\r\n    suitesById: Map<string, SpecsSuiteConfig> = new Map<string, SpecsSuiteConfig>();\r\n    anySuitesSupportDebug(): boolean {\r\n        for (const [suiteId, suiteConfig] of this.suitesById)\r\n            if (suiteConfig.debugger && suiteConfig.debugExecutable) return true;\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class SpecsSuiteConfig {\r\n    public isGroup: boolean = false;\r\n    public name: string;\r\n    public parent: SpecsSuiteConfig | undefined = undefined;\r\n    public children: SpecsSuiteConfig[] = [];\r\n    public buildCommand: string | undefined = undefined;\r\n    public discoveryCommand: string = \"\";\r\n    public groupSeparator: string | undefined = undefined;\r\n    public tagsSeparator: string | undefined = undefined;\r\n    public discoveryRegex: string | undefined = undefined;\r\n    public runCommand: string = \"\";\r\n    public debugExecutable: string | undefined = undefined;\r\n    public debugger: string | undefined = undefined;\r\n    public variables: { [key: string]: string } = {};\r\n\r\n    constructor(name: string = \"\", parent: SpecsSuiteConfig | undefined = undefined) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n    }\r\n\r\n    idenfifier(): string {\r\n        if (this.parent) return `${this.parent.idenfifier()}/${this.name}`;\r\n        else return this.name;\r\n    }\r\n}\r\n\r\nfunction parseSuiteConfig(\r\n    suiteJSON: any,\r\n    specsConfigFile: SpecsConfigFile,\r\n    parentSpecSuite: SpecsSuiteConfig | undefined = undefined,\r\n): SpecsSuiteConfig {\r\n    if (suiteJSON.name === undefined) throw new Error(\"Suite name is required\");\r\n\r\n    const suiteConfig = new SpecsSuiteConfig(suiteJSON.name, parentSpecSuite);\r\n\r\n    if (suiteJSON.group) suiteConfig.isGroup = suiteJSON.group;\r\n    if (suiteJSON.build) suiteConfig.buildCommand = suiteJSON.build;\r\n    if (suiteJSON.discover) suiteConfig.discoveryCommand = suiteJSON.discover;\r\n    if (suiteJSON.groupSeparator) suiteConfig.groupSeparator = suiteJSON.groupSeparator;\r\n    if (suiteJSON.tagsSeparator) suiteConfig.tagsSeparator = suiteJSON.tagsSeparator;\r\n    if (suiteJSON.pattern) suiteConfig.discoveryRegex = suiteJSON.pattern;\r\n    if (suiteJSON.run) suiteConfig.runCommand = suiteJSON.run;\r\n    if (suiteJSON.debug) suiteConfig.debugExecutable = suiteJSON.debug;\r\n    if (suiteJSON.debugger) suiteConfig.debugger = suiteJSON.debugger;\r\n    if (suiteJSON.suites)\r\n        for (const childSuiteJSON of suiteJSON.suites)\r\n            suiteConfig.children.push(parseSuiteConfig(childSuiteJSON, specsConfigFile));\r\n\r\n    for (const key in suiteJSON) suiteConfig.variables[key] = suiteJSON[key];\r\n\r\n    specsConfigFile.suitesById.set(suiteConfig.idenfifier(), suiteConfig);\r\n\r\n    return suiteConfig;\r\n}\r\n\r\nfunction processVariables(suiteConfig: SpecsSuiteConfig) {\r\n    const variables = suiteConfig.variables;\r\n    Object.keys(variables).forEach((variableName) => {\r\n        const variableValue = variables[variableName];\r\n        const replaceText = \"$\" + variableName;\r\n        if (suiteConfig.buildCommand)\r\n            suiteConfig.buildCommand = suiteConfig.buildCommand.replace(replaceText, variableValue);\r\n        if (suiteConfig.discoveryCommand)\r\n            suiteConfig.discoveryCommand = suiteConfig.discoveryCommand.replace(replaceText, variableValue);\r\n        if (suiteConfig.groupSeparator)\r\n            suiteConfig.groupSeparator = suiteConfig.groupSeparator.replace(replaceText, variableValue);\r\n        if (suiteConfig.tagsSeparator)\r\n            suiteConfig.tagsSeparator = suiteConfig.tagsSeparator.replace(replaceText, variableValue);\r\n        if (suiteConfig.discoveryRegex)\r\n            suiteConfig.discoveryRegex = suiteConfig.discoveryRegex.replace(replaceText, variableValue);\r\n        if (suiteConfig.runCommand) suiteConfig.runCommand = suiteConfig.runCommand.replace(replaceText, variableValue);\r\n        if (suiteConfig.debugExecutable)\r\n            suiteConfig.debugExecutable = suiteConfig.debugExecutable.replace(replaceText, variableValue);\r\n        if (suiteConfig.debugger) suiteConfig.debugger = suiteConfig.debugger.replace(replaceText, variableValue);\r\n    });\r\n}\r\n\r\nfunction parseSpecsConfigFile(configJSON: any): SpecsConfigFile {\r\n    const specsConfig = new SpecsConfigFile();\r\n\r\n    if (configJSON.suites) {\r\n        for (const suiteJSON of configJSON.suites) specsConfig.suites.push(parseSuiteConfig(suiteJSON, specsConfig));\r\n    } else if (configJSON.run || configJSON.discover) {\r\n        if (!configJSON.name) configJSON.name = \"\";\r\n        specsConfig.suites.push(parseSuiteConfig(configJSON, specsConfig));\r\n    }\r\n\r\n    if (configJSON.defaults) {\r\n        if (!configJSON.defaults.name) configJSON.defaults.name = \"defaults\";\r\n        specsConfig.defaults = parseSuiteConfig(configJSON.defaults, specsConfig);\r\n        specsConfig.defaults.isGroup = true;\r\n    }\r\n\r\n    specsConfig.suitesById.forEach((suiteConfig) => {\r\n        if (!suiteConfig.isGroup) {\r\n            if (!suiteConfig.buildCommand) suiteConfig.buildCommand = specsConfig.defaults.buildCommand;\r\n            if (!suiteConfig.discoveryCommand) suiteConfig.discoveryCommand = specsConfig.defaults.discoveryCommand;\r\n            if (!suiteConfig.groupSeparator) suiteConfig.groupSeparator = specsConfig.defaults.groupSeparator;\r\n            if (!suiteConfig.tagsSeparator) suiteConfig.tagsSeparator = specsConfig.defaults.tagsSeparator;\r\n            if (!suiteConfig.discoveryRegex) suiteConfig.discoveryRegex = specsConfig.defaults.discoveryRegex;\r\n            if (!suiteConfig.runCommand) suiteConfig.runCommand = specsConfig.defaults.runCommand;\r\n            if (!suiteConfig.debugExecutable) suiteConfig.debugExecutable = specsConfig.defaults.debugExecutable;\r\n            if (!suiteConfig.debugger) suiteConfig.debugger = specsConfig.defaults.debugger;\r\n            for (const key in specsConfig.defaults.variables)\r\n                if (!suiteConfig.variables[key]) suiteConfig.variables[key] = specsConfig.defaults.variables[key];\r\n        }\r\n    });\r\n\r\n    specsConfig.suitesById.forEach((suiteConfig) => {\r\n        processVariables(suiteConfig);\r\n    });\r\n\r\n    return specsConfig;\r\n}\r\n\r\nasync function readSpecsConfigFile(): Promise<SpecsConfigFile | undefined> {\r\n    const file = await vscode.workspace.findFiles(specConfigFileName);\r\n    if (file.length > 0) {\r\n        const content = await vscode.workspace.fs.readFile(file[0]);\r\n        const config = JSON.parse(content.toString());\r\n        return parseSpecsConfigFile(config);\r\n    } else {\r\n        vscode.window.showErrorMessage(\"No specs config file found\");\r\n    }\r\n}\r\n\r\nconst specConfigFileName = \".specs.json\";\r\n\r\nconst latestSpecsConfigCacheMs: number = 500;\r\nlet latestSpecsConfigGetTime: number = 0;\r\nlet latestSpecsConfigFile: SpecsConfigFile | undefined = undefined;\r\n\r\nexport async function getSpecsConfig(): Promise<SpecsConfigFile | undefined> {\r\n    if (latestSpecsConfigFile && new Date().getTime() - latestSpecsConfigGetTime < latestSpecsConfigCacheMs)\r\n        return latestSpecsConfigFile;\r\n\r\n    latestSpecsConfigFile = await readSpecsConfigFile();\r\n    latestSpecsConfigGetTime = new Date().getTime();\r\n    return latestSpecsConfigFile;\r\n}\r\n","import * as vscode from \"vscode\";\r\nimport { getSpecsConfig } from \"./SpecsConfig\";\r\nimport { associateTestItemAndTest, testItemToTest } from \"./TestItems\";\r\nimport { buildTestsProject, debugTest, discoverTests, runTest } from \"./TestManager\";\r\nimport { ITestComponent, Test, TestComponentType, TestGroup } from \"./TestTypes\";\r\n\r\nconst CONTROLLER_ID = \"specs-explorer\";\r\nconst CONTROLLER_LABEL = \"Specs Explorer\";\r\n\r\nclass TestExplorer {\r\n    _controller: vscode.TestController;\r\n\r\n    constructor() {\r\n        this._controller = vscode.tests.createTestController(CONTROLLER_ID, CONTROLLER_LABEL);\r\n        this._controller.refreshHandler = this.refresh.bind(this);\r\n        this._controller.resolveHandler = async (test) => {\r\n            if (test) vscode.window.showErrorMessage(\"Resolving individual tests is not supported\");\r\n            else await this.refresh();\r\n        };\r\n        this._controller.createRunProfile(\"Run\", vscode.TestRunProfileKind.Run, this.run.bind(this), true);\r\n\r\n        // TODO: update so that only tests with the 'debuggable' tag are debuggable! based on the suite config :)\r\n        getSpecsConfig().then((config) => {\r\n            if (config?.anySuitesSupportDebug())\r\n                this._controller.createRunProfile(\r\n                    \"Debug\",\r\n                    vscode.TestRunProfileKind.Debug,\r\n                    this.debug.bind(this),\r\n                    true,\r\n                );\r\n        });\r\n    }\r\n\r\n    registerController(context: vscode.ExtensionContext) {\r\n        context.subscriptions.push(this._controller);\r\n    }\r\n\r\n    private registerTestComponent(\r\n        discoveredIds: Set<string>,\r\n        testComponent: ITestComponent,\r\n        parentTestItem?: vscode.TestItem,\r\n    ) {\r\n        if (testComponent.type === TestComponentType.Test) {\r\n            const test = testComponent as Test;\r\n            discoveredIds.add(test.identifier());\r\n            const filePath = vscode.Uri.joinPath(vscode.workspace.workspaceFolders![0].uri, test.filePath);\r\n            const vscodeTest = this._controller.createTestItem(\r\n                test.identifier(),\r\n                test.description,\r\n                vscode.Uri.file(filePath.fsPath),\r\n            );\r\n            associateTestItemAndTest(vscodeTest, test);\r\n            vscodeTest.range = new vscode.Range(\r\n                new vscode.Position(test.lineNumber - 1, 0),\r\n                new vscode.Position(test.lineNumber - 1, 0),\r\n            );\r\n            if (parentTestItem) parentTestItem.children.add(vscodeTest);\r\n            else this._controller.items.add(vscodeTest);\r\n        } else if (testComponent.type === TestComponentType.TestGroup) {\r\n            const testGroup = testComponent as TestGroup;\r\n            if (testGroup.description === \"\") {\r\n                testGroup.children.forEach((child) => {\r\n                    this.registerTestComponent(discoveredIds, child, parentTestItem);\r\n                });\r\n            } else {\r\n                discoveredIds.add(testGroup.identifier());\r\n                const vscodeTestGroup = this._controller.createTestItem(testGroup.identifier(), testGroup.description);\r\n                if (parentTestItem) parentTestItem.children.add(vscodeTestGroup);\r\n                else this._controller.items.add(vscodeTestGroup);\r\n                testGroup.children.forEach((child) => {\r\n                    this.registerTestComponent(discoveredIds, child, vscodeTestGroup);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async refresh() {\r\n        const existingTestIds = new Set<string>();\r\n        this._controller.items.forEach((test) => {\r\n            existingTestIds.add(test.id);\r\n        });\r\n\r\n        const discoveredTestComponents = await discoverTests();\r\n        if (!discoveredTestComponents) {\r\n            vscode.window.showErrorMessage(\"Failed to discover tests\");\r\n            this._controller.items.forEach((test) => {\r\n                this._controller.items.delete(test.id);\r\n            });\r\n            return;\r\n        }\r\n\r\n        const discoveredIds = new Set<string>();\r\n\r\n        discoveredTestComponents.forEach((testComponent) => {\r\n            this.registerTestComponent(discoveredIds, testComponent);\r\n        });\r\n\r\n        existingTestIds.forEach((id) => {\r\n            if (!discoveredIds.has(id)) this._controller.items.delete(id);\r\n        });\r\n    }\r\n\r\n    addTestsToRun(test: vscode.TestItem, testsToRun: vscode.TestItem[]) {\r\n        testsToRun.push(test);\r\n        test.children.forEach((child) => {\r\n            this.addTestsToRun(child, testsToRun);\r\n        });\r\n    }\r\n\r\n    async run(request: vscode.TestRunRequest, token: vscode.CancellationToken) {\r\n        await buildTestsProject();\r\n\r\n        const run = this._controller.createTestRun(request);\r\n        const testsToRun: vscode.TestItem[] = [];\r\n\r\n        if (request.include)\r\n            request.include.forEach((test) => {\r\n                this.addTestsToRun(test, testsToRun);\r\n            });\r\n        else\r\n            this._controller.items.forEach((test) => {\r\n                this.addTestsToRun(test, testsToRun);\r\n            });\r\n\r\n        // run.appendOutput(`Running ${testsToRun.length} tests\\n`);\r\n\r\n        while (testsToRun.length > 0 && !token.isCancellationRequested) {\r\n            // run.appendOutput(`Tests remaining: ${testsToRun.length}\\n`);\r\n\r\n            const testItem = testsToRun.pop()!;\r\n            // run.appendOutput(`Test item: ${testItem.label}\\n`);\r\n            if (request.exclude?.includes(testItem)) continue;\r\n\r\n            const testComponent = testItemToTest(testItem);\r\n            if (!testComponent) continue;\r\n\r\n            if (testComponent.type === TestComponentType.TestGroup) continue;\r\n            const test = testComponent as Test;\r\n            // run.appendOutput(`Running test: ${test.description}\\n`);\r\n\r\n            const start = Date.now();\r\n            run.started(testItem);\r\n            const testResult = await runTest(test.suiteId, test.filePath, test.lineNumber);\r\n            if (!testResult) {\r\n                // run.appendOutput(`Test not run: ${test.description}\\n`);\r\n                continue;\r\n            }\r\n\r\n            const duration = Date.now() - start;\r\n            if (testResult.testPassed) {\r\n                // run.appendOutput(`Test passed: ${test.description}\\n`);\r\n                run.passed(testItem, duration);\r\n            }\r\n            else {\r\n                // run.appendOutput(`Test failed: ${test.description}\\n`);\r\n                run.failed(testItem, new vscode.TestMessage(testResult.testOutput), duration);\r\n            }\r\n        }\r\n\r\n        // run.appendOutput(\"All tests run\\n\");\r\n        run.end();\r\n    }\r\n\r\n    async debug(request: vscode.TestRunRequest, token: vscode.CancellationToken) {\r\n        const debugAll = request.include === undefined;\r\n        if (debugAll) {\r\n            vscode.window.showErrorMessage(\"Debug all tests is not supported\");\r\n            return;\r\n        }\r\n        if (request.include.length > 1) {\r\n            vscode.window.showErrorMessage(\"Debugging multiple tests is not supported\");\r\n            return;\r\n        }\r\n\r\n        const testItem = request.include[0];\r\n        const testComponent = testItemToTest(testItem);\r\n        if (testComponent.type === TestComponentType.TestGroup) return;\r\n        const test = testComponent as Test;\r\n\r\n        await buildTestsProject();\r\n        await debugTest(test.suiteId, test.filePath, test.lineNumber);\r\n    }\r\n}\r\n\r\nconst testExplorer = new TestExplorer();\r\n\r\nexport function RegisterSpecsTestExtension(context: vscode.ExtensionContext) {\r\n    testExplorer.registerController(context);\r\n}\r\n","import { TestItem } from \"vscode\";\r\nimport { ITestComponent } from \"./TestTypes\";\r\n\r\nconst testItemsToTestComponent = new WeakMap<TestItem, ITestComponent>();\r\nconst testComponentToTestItem = new WeakMap<ITestComponent, TestItem>();\r\n\r\nexport function testItemToTest(testItem: TestItem): ITestComponent {\r\n    return testItemsToTestComponent.get(testItem)!;\r\n}\r\n\r\nexport function testToTestItem(testComponent: ITestComponent): TestItem {\r\n    return testComponentToTestItem.get(testComponent)!;\r\n}\r\n\r\nexport function associateTestItemAndTest(testItem: TestItem, testComponent: ITestComponent) {\r\n    testItemsToTestComponent.set(testItem, testComponent);\r\n    testComponentToTestItem.set(testComponent, testItem);\r\n}\r\n","import * as vscode from \"vscode\";\r\nimport * as child_process from \"child_process\";\r\nimport { getSpecsConfig, SpecsSuiteConfig } from \"./SpecsConfig\";\r\nimport { ITestComponent, Test, TestGroup, TestResult } from \"./TestTypes\";\r\nimport { SpecsExplorerOutput } from \"./OutputChannel\";\r\n\r\nclass TestManager {\r\n    async buildSuite(specsSuiteConfig: SpecsSuiteConfig): Promise<void> {\r\n        if (specsSuiteConfig.isGroup) return;\r\n        if (specsSuiteConfig.buildCommand) {\r\n            const command = specsSuiteConfig.buildCommand;\r\n            const options = { cwd: vscode.workspace.workspaceFolders?.[0].uri.fsPath };\r\n            return new Promise((resolve) => {\r\n                SpecsExplorerOutput.appendLine(`Running ${command}`);\r\n                const child = child_process.exec(command, options);\r\n                child.stdout?.on(\"data\", (data) => {\r\n                    SpecsExplorerOutput.appendLine(data);\r\n                });\r\n                child.stderr?.on(\"data\", (data) => {\r\n                    SpecsExplorerOutput.appendLine(data);\r\n                });\r\n                child.on(\"close\", (code) => {\r\n                    SpecsExplorerOutput.appendLine(`Command ${command} exited with code ${code}`);\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public async build(suiteIds: string[] | undefined = undefined): Promise<void> {\r\n        const specsConfig = await getSpecsConfig();\r\n        if (!specsConfig?.suites.length) {\r\n            vscode.window.showErrorMessage(\"No suites specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        if (!suiteIds) suiteIds = Array.from(specsConfig.suitesById.keys());\r\n        if (!suiteIds.length) return;\r\n\r\n        const promises: Promise<void>[] = [];\r\n        suiteIds.forEach((suiteId) => {\r\n            const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n            if (!suiteConfig?.isGroup) {\r\n                if (suiteConfig?.buildCommand) promises.push(this.buildSuite(suiteConfig));\r\n            }\r\n        });\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    public async run(suiteId: string, filePath: string, lineNumber: number): Promise<TestResult | undefined> {\r\n        const specsConfig = await getSpecsConfig();\r\n        const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n        if (suiteConfig?.isGroup) return;\r\n        if (!suiteConfig) {\r\n            vscode.window.showErrorMessage(`Suite '${suiteId}' not found in specs.json`);\r\n            return;\r\n        }\r\n        if (!suiteConfig?.runCommand) {\r\n            vscode.window.showErrorMessage(\"No run command specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        let testResult: TestResult = new TestResult();\r\n\r\n        // TODO HERE! USE REPLACEMENT TOKEN THINGS!\r\n        const command = suiteConfig.runCommand.replace(\"{file}\", filePath).replace(\"{line}\", lineNumber.toString());\r\n\r\n        return new Promise((resolve) => {\r\n            const options = { cwd: vscode.workspace.workspaceFolders?.[0].uri.fsPath };\r\n            SpecsExplorerOutput.appendLine(`Running ${command}`);\r\n            const child = child_process.exec(command, options, (error) => {\r\n                if (error) testResult.testPassed = false;\r\n            });\r\n            child.stdout?.on(\"data\", (data) => {\r\n                SpecsExplorerOutput.appendLine(data);\r\n                testResult.testOutput += data;\r\n            });\r\n            child.stderr?.on(\"data\", (data) => {\r\n                SpecsExplorerOutput.appendLine(data);\r\n                testResult.testOutput += data;\r\n            });\r\n            child.on(\"close\", (code) => {\r\n                SpecsExplorerOutput.appendLine(`Command ${command} exited with code ${code}`);\r\n                testResult.testPassed = code === 0;\r\n                resolve(testResult);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async debug(suiteId: string, filePath: string, lineNumber: number) {\r\n        const specsConfig = await getSpecsConfig();\r\n        const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n\r\n        if (!suiteConfig?.debugExecutable) {\r\n            vscode.window.showErrorMessage(\"No debug command specified in specs.json\");\r\n            return;\r\n        }\r\n        if (!suiteConfig?.debugger) {\r\n            vscode.window.showErrorMessage(\"No debugger specified (e.g. cppvsdbg) in specs.json\");\r\n            return;\r\n        }\r\n\r\n        vscode.debug.startDebugging(vscode.workspace.workspaceFolders?.[0], {\r\n            name: \"Debug Test\",\r\n            type: suiteConfig.debugger,\r\n            request: \"launch\",\r\n            program: suiteConfig.debugExecutable,\r\n            args: [filePath, lineNumber.toString()],\r\n            cwd: \"${workspaceFolder}\",\r\n            environment: [],\r\n        });\r\n    }\r\n\r\n    public async discoverSuite(suiteId: string): Promise<ITestComponent[] | undefined> {\r\n        const specsConfig = await getSpecsConfig();\r\n        const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n        if (!suiteConfig) {\r\n            vscode.window.showErrorMessage(`Suite '${suiteId}' not found in specs.json`);\r\n            return;\r\n        }\r\n        if (suiteConfig?.isGroup) return;\r\n        if (!suiteConfig?.discoveryCommand) {\r\n            vscode.window.showErrorMessage(\"No discovery command (discover:) specified in specs.json\");\r\n            return;\r\n        }\r\n        if (!suiteConfig?.discoveryRegex) {\r\n            vscode.window.showErrorMessage(\"No discovery regex (pattern:) specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        const command = suiteConfig.discoveryCommand;\r\n        const options = { cwd: vscode.workspace.workspaceFolders?.[0].uri.fsPath };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            SpecsExplorerOutput.appendLine(`Running ${command}`);\r\n            const child = child_process.exec(command, options, (error) => {\r\n                if (error) reject(error);\r\n            });\r\n            child.stdout?.on(\"data\", (data) => {\r\n                SpecsExplorerOutput.appendLine(data);\r\n                const rootTestGroup = new TestGroup(suiteId, suiteConfig.name);\r\n                const lines = data.split(\"\\n\");\r\n                for (const line of lines) this.parseTestLine(line, suiteConfig!, rootTestGroup);\r\n                if (suiteConfig.name === \"\") resolve(rootTestGroup.children);\r\n                else resolve([rootTestGroup]);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async discover(suiteIds: string[] | undefined = undefined): Promise<ITestComponent[] | undefined> {\r\n        const specsConfig = await getSpecsConfig();\r\n        if (!specsConfig?.suites.length) {\r\n            vscode.window.showErrorMessage(\"No suites specified in specs.json\");\r\n            return;\r\n        }\r\n\r\n        if (!suiteIds) suiteIds = Array.from(specsConfig.suitesById.keys());\r\n        if (!suiteIds.length) return;\r\n\r\n        const promises: Promise<ITestComponent[] | undefined>[] = [];\r\n        suiteIds.forEach((suiteId) => {\r\n            const suiteConfig = specsConfig?.suitesById.get(suiteId);\r\n            if (suiteConfig?.discoveryCommand) promises.push(this.discoverSuite(suiteConfig.idenfifier()));\r\n        });\r\n        return Promise.all(promises).then((results) => {\r\n            const testComponents: ITestComponent[] = [];\r\n            results.forEach((result) => {\r\n                if (result) testComponents.push(...result);\r\n            });\r\n            return testComponents;\r\n        });\r\n    }\r\n\r\n    private parseTestLine(line: string, suiteConfig: SpecsSuiteConfig, rootTestGroup: TestGroup) {\r\n        const suiteId = suiteConfig.idenfifier();\r\n        const testInfoRegex = new RegExp(suiteConfig.discoveryRegex!);\r\n        const matches = testInfoRegex.exec(line);\r\n        const tagsSeparator = suiteConfig.tagsSeparator ? suiteConfig.tagsSeparator : \",\";\r\n        if (matches && matches.groups) {\r\n            const filePath = matches.groups.filepath;\r\n            const lineNumber = matches.groups.linenumber ? parseInt(matches.groups.linenumber) : 0;\r\n            const tags = matches.groups.tags ? matches.groups.tags.split(tagsSeparator) : [];\r\n            const fullTestDescription = matches.groups.description.trim();\r\n            SpecsExplorerOutput.appendLine(`Discovered test: ${fullTestDescription} (${filePath}:${lineNumber})`);\r\n            if (suiteConfig.groupSeparator) {\r\n                const testDescriptionParts = fullTestDescription\r\n                    .split(suiteConfig.groupSeparator)\r\n                    .map((part) => part.trim());\r\n\r\n                const testDescription = testDescriptionParts.pop()?.trim()!;\r\n\r\n                if (testDescriptionParts.length === 0) {\r\n                    SpecsExplorerOutput.appendLine(\r\n                        `Adding test ${testDescription} to root group (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                    );\r\n                    const test = new Test(suiteId, testDescription, filePath, lineNumber, tags);\r\n                    rootTestGroup.children.push(test);\r\n                    return;\r\n                }\r\n\r\n                let currentTestGroup = rootTestGroup;\r\n                testDescriptionParts.forEach((testGroupDescription) => {\r\n                    let testGroup = currentTestGroup.children.find(\r\n                        (child) => child.description === testGroupDescription,\r\n                    );\r\n                    if (!testGroup) {\r\n                        SpecsExplorerOutput.appendLine(\r\n                            `Adding test group ${testGroupDescription} to group ${currentTestGroup.description} (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                        );\r\n                        testGroup = new TestGroup(suiteId, testGroupDescription, currentTestGroup);\r\n                        currentTestGroup.children.push(testGroup);\r\n                    }\r\n                    currentTestGroup = testGroup as TestGroup;\r\n                });\r\n\r\n                SpecsExplorerOutput.appendLine(\r\n                    `Adding test ${testDescription} to group ${currentTestGroup.description} (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                );\r\n                const test = new Test(suiteId, testDescription, filePath, lineNumber, tags, currentTestGroup);\r\n\r\n                currentTestGroup.children.push(test);\r\n            } else {\r\n                SpecsExplorerOutput.appendLine(\r\n                    `Adding test ${fullTestDescription.trim()} to root group (${suiteId}) [${filePath}:${lineNumber}]`,\r\n                );\r\n                const test = new Test(suiteId, fullTestDescription.trim(), filePath, lineNumber, tags);\r\n                rootTestGroup.children.push(test);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst testManager = new TestManager();\r\n\r\nexport async function buildTestsProject(): Promise<void> {\r\n    await testManager.build();\r\n}\r\n\r\nexport async function runTest(suiteId: string, filePath: string, lineNumber: number): Promise<TestResult | undefined> {\r\n    return await testManager.run(suiteId, filePath, lineNumber);\r\n}\r\n\r\nexport async function debugTest(suiteId: string, filePath: string, lineNumber: number) {\r\n    testManager.debug(suiteId, filePath, lineNumber);\r\n}\r\n\r\nexport async function discoverTests(): Promise<ITestComponent[] | undefined> {\r\n    await testManager.build();\r\n    return await testManager.discover();\r\n}\r\n","export enum TestComponentType {\r\n    Test,\r\n    TestGroup,\r\n}\r\n\r\nexport interface ITestComponent {\r\n    suiteId: string;\r\n    type: TestComponentType;\r\n    description: string;\r\n    group: TestGroup | undefined;\r\n    fullDescription(): string;\r\n}\r\n\r\nclass TestComponent implements ITestComponent {\r\n    public suiteId: string;\r\n    public type = TestComponentType.Test;\r\n    public description;\r\n    public group;\r\n\r\n    constructor(suiteId: string, description: string, group: TestGroup | undefined = undefined) {\r\n        this.suiteId = suiteId;\r\n        this.description = description;\r\n        this.group = group;\r\n    }\r\n\r\n    public fullDescription(): string {\r\n        if (this.group) return `${this.group.fullDescription()} > ${this.description}`;\r\n        else return this.description;\r\n    }\r\n}\r\n\r\n// Class TestGroup which inherits from TestComponent and additionally contains a list of children TestComponents\r\nexport class TestGroup extends TestComponent {\r\n    public type = TestComponentType.TestGroup;\r\n    public children: ITestComponent[] = [];\r\n    constructor(suiteId: string, description: string = \"\", group: TestGroup | undefined = undefined) {\r\n        super(suiteId, description, group);\r\n    }\r\n    isRootGroup(): boolean {\r\n        return this.group === undefined;\r\n    }\r\n    identifier(): string {\r\n        return `[GROUP]--${this.suiteId}--${this.description}`;\r\n    }\r\n}\r\n\r\n// Class Test which inherits from TestComponent and additionally contains a file path and line number\r\nexport class Test extends TestComponent {\r\n    public filePath: string;\r\n    public lineNumber: number;\r\n    public tags: string[] = [];\r\n    constructor(\r\n        suiteId: string,\r\n        description: string,\r\n        filePath: string, // TODO: allow undefined\r\n        lineNumber: number, // TODO: allow undefined\r\n        tags: string[] = [],\r\n        group: TestGroup | undefined = undefined,\r\n    ) {\r\n        super(suiteId, description, group);\r\n        this.filePath = filePath;\r\n        this.lineNumber = lineNumber;\r\n    }\r\n    identifier(): string {\r\n        return `${this.suiteId}--${this.filePath}--${this.lineNumber}--${this.description}`;\r\n    }\r\n}\r\n\r\nexport class TestResult {\r\n    constructor(public testOutput: string = \"\", public testPassed: boolean = false) {}\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from \"vscode\";\nimport { RegisterSpecsTestExtension } from \"./TestExplorer\";\n\n// TODO: GROUPS!\n// TODO: TAGS!\n\nexport function activate(context: vscode.ExtensionContext) {\n    RegisterSpecsTestExtension(context);\n}\n\nexport function deactivate() {}\n"],"names":["SpecsExplorerOutput","vscode","window","createOutputChannel","SpecsConfigFile","suites","defaults","SpecsSuiteConfig","suitesById","Map","anySuitesSupportDebug","suiteId","suiteConfig","this","debugger","debugExecutable","isGroup","name","parent","undefined","children","buildCommand","discoveryCommand","groupSeparator","tagsSeparator","discoveryRegex","runCommand","variables","constructor","idenfifier","parseSuiteConfig","suiteJSON","specsConfigFile","parentSpecSuite","Error","group","build","discover","pattern","run","debug","childSuiteJSON","push","key","set","latestSpecsConfigFile","latestSpecsConfigGetTime","async","Date","getTime","file","workspace","findFiles","length","content","fs","readFile","configJSON","specsConfig","forEach","Object","keys","variableName","variableValue","replaceText","replace","processVariables","parseSpecsConfigFile","JSON","parse","toString","showErrorMessage","readSpecsConfigFile","testExplorer","_controller","tests","createTestController","refreshHandler","refresh","bind","resolveHandler","test","createRunProfile","TestRunProfileKind","Run","getSpecsConfig","then","config","Debug","registerController","context","subscriptions","registerTestComponent","discoveredIds","testComponent","parentTestItem","type","TestComponentType","Test","add","identifier","filePath","Uri","joinPath","workspaceFolders","uri","vscodeTest","createTestItem","description","fsPath","associateTestItemAndTest","range","Range","Position","lineNumber","items","TestGroup","testGroup","child","vscodeTestGroup","existingTestIds","Set","id","discoveredTestComponents","discoverTests","delete","has","addTestsToRun","testsToRun","request","token","buildTestsProject","createTestRun","include","isCancellationRequested","testItem","pop","exclude","includes","testItemToTest","start","now","started","testResult","runTest","duration","testPassed","passed","failed","TestMessage","testOutput","end","debugTest","testItemsToTestComponent","WeakMap","testComponentToTestItem","get","testManager","buildSuite","specsSuiteConfig","command","options","cwd","Promise","resolve","appendLine","child_process","exec","stdout","on","data","stderr","code","suiteIds","Array","from","promises","all","TestResult","error","startDebugging","program","args","environment","discoverSuite","reject","rootTestGroup","lines","split","line","parseTestLine","results","testComponents","result","matches","RegExp","groups","filepath","linenumber","parseInt","tags","fullTestDescription","trim","testDescriptionParts","map","part","testDescription","currentTestGroup","testGroupDescription","find","TestComponent","fullDescription","super","isRootGroup","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","RegisterSpecsTestExtension"],"sourceRoot":""}